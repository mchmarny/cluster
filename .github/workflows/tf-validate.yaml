name: terraform-validate

on:
  push:
    branches: [ main ]
  pull_request:
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/.terraform.lock.hcl'

permissions:
  contents: read

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd  # v3.1.2
        with:
          terraform_version: 1.13.4

      - name: Cache Terraform plugin directory
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830  # v4.3.0
        with:
          path: ~/.terraform.d/plugin-cache
          key: tf-plugins-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            tf-plugins-${{ runner.os }}-

      - name: Install TFLint
        uses: terraform-linters/setup-tflint@acd1575d3c037258ce5b2dd01379dc49ce24c6b7  # v6.2.0

      - name: Terraform fmt (check)
        run: |
          set -euo pipefail
          echo "Running 'terraform fmt -recursive -check -diff'..."
          terraform fmt -recursive -check -diff

      - name: Terraform validate (per directory)
        shell: bash
        run: |
          set -euo pipefail

          # Find unique directories that contain *.tf files
          mapfile -t DIRS < <(git ls-files '*.tf' | xargs -n1 dirname | sort -u)

          if [[ ${#DIRS[@]} -eq 0 ]]; then
            echo "No Terraform directories found."
            exit 0
          fi

          echo "Validating Terraform in the following directories:"
          printf ' - %s\n' "${DIRS[@]}"

          FAILED=()

          for d in "${DIRS[@]}"; do
            echo ""
            echo "=== $d ==="
            # Use -backend=false to avoid touching remote backends during validation
            if ! terraform -chdir="$d" init -backend=false -input=false -no-color; then
              echo "::error title=terraform init failed::$d"
              FAILED+=("$d (init)")
              continue
            fi
            if ! terraform -chdir="$d" validate -no-color; then
              echo "::error title=terraform validate failed::$d"
              FAILED+=("$d (validate)")
              continue
            fi
          done

          if [[ ${#FAILED[@]} -ne 0 ]]; then
            echo ""
            echo "The following directories failed:"
            printf ' - %s\n' "${FAILED[@]}"
            exit 1
          fi

      - name: TFLint (recursive)
        run: |
          set -euo pipefail
          # Initialize TFLint (downloads rulesets) and run recursively.
          tflint --init
          # --recursive: scan all subdirectories that contain *.tf
          # --format=compact for readable CI logs; change to sarif if you want annotations
          tflint --recursive --format compact

      - name: Trivy IaC scan (Terraform)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8  # v0.33.1
        with:
          scan-type: 'config'
          hide-progress: true
          format: 'sarif'
          ignore-unfixed: true
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'
          exit-code: '1'
          trivyignores: '.trivyignore'

      - name: Upload Report
        uses: github/codeql-action/upload-sarif@16df4fbc19aea13d921737861d6c622bf3cefe23  # v2.23.0
        with:
          sarif_file: 'trivy-results.sarif'