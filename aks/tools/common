#!/usr/bin/env bash

# Common functions and variables for AKS Terraform automation

set -o errexit
set -o nounset
set -o pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $*"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

# Check if required commands exist
check_command() {
    local cmd=$1
    if ! command -v "${cmd}" &> /dev/null; then
        log_error "Required command '${cmd}' not found"
        return 1
    fi
}

# Check required tools
check_prerequisites() {
    log_info "Checking prerequisites..."
    local missing_tools=()
    
    for tool in terraform az jq; do
        if ! check_command "${tool}"; then
            missing_tools+=("${tool}")
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        log_info "Please install the missing tools and try again"
        return 1
    fi
    
    log_info "All prerequisites satisfied"
}

# Validate Azure CLI is logged in
check_azure_login() {
    log_info "Checking Azure CLI authentication..."
    if ! az account show &> /dev/null; then
        log_error "Not logged in to Azure CLI"
        log_info "Please run: az login"
        return 1
    fi
    
    local account_name
    account_name=$(az account show --query name -o tsv)
    log_info "Logged in to Azure account: ${account_name}"
}

# Parse YAML configuration
parse_config() {
    local config_file=$1
    local key=$2
    
    if [ ! -f "${config_file}" ]; then
        log_error "Configuration file not found: ${config_file}"
        return 1
    fi
    
    # Use yq if available, otherwise fall back to python
    if command -v yq &> /dev/null; then
        yq eval "${key}" "${config_file}"
    else
        python3 -c "import yaml, sys; print(yaml.safe_load(open('${config_file}'))${key})"
    fi
}

# Get configuration value with default
get_config_value() {
    local config_file=$1
    local key=$2
    local default=${3:-}
    
    local value
    value=$(parse_config "${config_file}" "${key}" 2>/dev/null || echo "${default}")
    echo "${value}"
}

# Validate configuration file
validate_config() {
    local config_file=$1
    
    log_info "Validating configuration file: ${config_file}"
    
    if [ ! -f "${config_file}" ]; then
        log_error "Configuration file not found: ${config_file}"
        return 1
    fi
    
    # Check required fields
    local required_fields=(
        ".deployment.id"
        ".deployment.subscription"
        ".deployment.resourceGroup"
        ".deployment.location"
    )
    
    for field in "${required_fields[@]}"; do
        local value
        value=$(parse_config "${config_file}" "${field}" 2>/dev/null || echo "")
        if [ -z "${value}" ] || [ "${value}" = "null" ]; then
            log_error "Required field missing or empty: ${field}"
            return 1
        fi
    done
    
    log_info "Configuration file is valid"
}

# Initialize Terraform
init_terraform() {
    local terraform_dir=$1
    
    log_info "Initializing Terraform in: ${terraform_dir}"
    
    cd "${terraform_dir}"
    terraform init -upgrade
    
    log_info "Terraform initialized successfully"
}

# Format Terraform files
format_terraform() {
    local terraform_dir=$1
    
    log_info "Formatting Terraform files..."
    cd "${terraform_dir}"
    terraform fmt -recursive
}

# Validate Terraform configuration
validate_terraform() {
    local terraform_dir=$1
    
    log_info "Validating Terraform configuration..."
    cd "${terraform_dir}"
    terraform validate
    
    log_info "Terraform configuration is valid"
}

# Get Terraform output
get_terraform_output() {
    local terraform_dir=$1
    local output_name=$2
    
    cd "${terraform_dir}"
    terraform output -json "${output_name}" 2>/dev/null || echo "{}"
}

# Wait for resource to be ready
wait_for_resource() {
    local check_command=$1
    local timeout=${2:-300}
    local interval=${3:-10}
    local elapsed=0
    
    log_info "Waiting for resource to be ready (timeout: ${timeout}s)..."
    
    while ! eval "${check_command}" &> /dev/null; do
        if [ ${elapsed} -ge ${timeout} ]; then
            log_error "Timeout waiting for resource"
            return 1
        fi
        sleep ${interval}
        elapsed=$((elapsed + interval))
        echo -n "."
    done
    
    echo ""
    log_info "Resource is ready"
}

# Export for use in other scripts
export -f log_info
export -f log_warn
export -f log_error
export -f check_command
export -f check_prerequisites
export -f check_azure_login
export -f parse_config
export -f get_config_value
export -f validate_config
export -f init_terraform
export -f format_terraform
export -f validate_terraform
export -f get_terraform_output
export -f wait_for_resource
