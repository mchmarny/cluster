#!/usr/bin/env bash

DIR="$(dirname "$0")"
. "${DIR}/env"

# Add the EBS CSI Driver (not installed by default), and make sure itâ€™s listed in the k8s
eksctl create addon \
    --name aws-ebs-csi-driver \
    --cluster $cluster_name \
    --service-account-role-arn arn:aws:iam::${account_id}:role/AmazonEKS_EBS_CSI_DriverRole \
    --force

# Check the status of the EBS CSI driver
eksctl get addon --name aws-ebs-csi-driver --cluster $cluster_name
kubectl get csidrivers

#Create EBS CSI driver IAM role
eksctl create iamserviceaccount \
    --name ebs-csi-controller-sa \
    --namespace kube-system \
    --cluster $cluster_name \
    --role-name AmazonEKS_EBS_CSI_DriverRole \
    --role-only \
    --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
    --approve

# Create new default gp3 storage class (more performant and cheaper)
kubectl apply -f - <<EOF
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ebs-sc
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
allowVolumeExpansion: true
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: gp3
EOF

# Delete the default gp2 storage class
kubectl get sc
kubectl delete sc gp2

# Create PVC to test the new storage class
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-pvc
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: 1Gi
EOF
