#!/bin/bash

set -euo pipefail

# Paths
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "${DIR}/common"
ROOT=$(dirname "${DIR}")
SRC_DIR="${SRC_DIR:-${ROOT}/terraform}"
CONFIG_FILE="$(realpath "${1:-}")"

# Check for required tools
REQUIRED_TOOLS=(yq terraform oci)
has_tools "${REQUIRED_TOOLS[@]}"

# Validate required environment variables
if [[ -z "$CONFIG_FILE" ]]; then
  err "Usage: $0 <path to config.yaml>"
fi
if [[ ! -f "$CONFIG_FILE" ]]; then
  err "Error: Config file does not exist at the specified path: ${CONFIG_FILE}"
fi

if [[ -z "${SRC_DIR:-}" ]]; then
  err "Error: SRC_DIR environment variable is not set."
fi
if [[ ! -d "${SRC_DIR}" ]]; then
  err "Error: SRC_DIR directory does not exist at the specified path: ${SRC_DIR}"
fi

# Validate OCI authentication variables
if [[ -z "${OCI_USER_OCID:-}" ]]; then
  err "Error: OCI_USER_OCID environment variable is not set."
fi
if [[ -z "${OCI_FINGERPRINT:-}" ]]; then
  err "Error: OCI_FINGERPRINT environment variable is not set."
fi
if [[ -z "${OCI_PRIVATE_KEY_PATH:-}" ]]; then
  err "Error: OCI_PRIVATE_KEY_PATH environment variable is not set."
fi

# Config 
DEP_ID="$(yq -er '.deployment.id' $CONFIG_FILE)"
DEP_REGION="$(yq -er '.deployment.region' $CONFIG_FILE)"
TENANCY_OCID="$(yq -er '.deployment.tenancy' $CONFIG_FILE)"
COMPARTMENT_OCID="$(yq -er '.deployment.compartment' $CONFIG_FILE)"
CLUSTER="$(yq -er '.cluster.name' $CONFIG_FILE)"
DESTROY="$(yq -er '.deployment.destroy // "false"' "$CONFIG_FILE")"
NAMESPACE="$(oci os ns get --query 'data' --raw-output)"
BUCKET_NAME="cluster-builder-state-${DEP_ID}"
STATE_KEY="deployments/${DEP_REGION}/${DEP_ID}/terraform.tfstate"

# S3-compatible endpoint for OCI Object Storage
S3_ENDPOINT="https://${NAMESPACE}.compat.objectstorage.${DEP_REGION}.oraclecloud.com"

msg "Using"
msg " config:      $CONFIG_FILE"
msg " source:      $SRC_DIR"
msg " deployment:  $DEP_ID"
msg " region:      $DEP_REGION"
msg " tenancy:     $TENANCY_OCID"
msg " compartment: $COMPARTMENT_OCID"
msg " namespace:   $NAMESPACE"
msg " bucket:      $BUCKET_NAME"
msg " destroy:     $([[ "$DESTROY" == "true" ]] && echo "yes" || echo "no")"
msg " state:       s3://$BUCKET_NAME/$STATE_KEY"

# Initialize, plan and apply
msg "Initializing Terraform..."
terraform -chdir="$SRC_DIR" init \
  -upgrade \
  -migrate-state \
  -force-copy \
  -backend-config="bucket=$BUCKET_NAME" \
  -backend-config="key=$STATE_KEY" \
  -backend-config="region=$DEP_REGION" \
  -backend-config="endpoint=$S3_ENDPOINT" \
  -backend-config="skip_region_validation=true" \
  -backend-config="skip_credentials_validation=true" \
  -backend-config="skip_metadata_api_check=true" \
  -backend-config="use_path_style=true"

if [[ "$DESTROY" == "true" ]]; then
  msg "Destroying deployment, OK?"
  read -p "Type 'yes' to confirm destruction: " confirm
  if [[ "$confirm" != "yes" ]]; then
    err "Destruction cancelled"
  fi
  TF_VAR_CONFIG_PATH="$CONFIG_FILE" \
  TF_VAR_OCI_USER_OCID="$OCI_USER_OCID" \
  TF_VAR_OCI_FINGERPRINT="$OCI_FINGERPRINT" \
  TF_VAR_OCI_PRIVATE_KEY_PATH="$OCI_PRIVATE_KEY_PATH" \
    terraform -chdir="$SRC_DIR" destroy
  msg "Destruction complete"
  exit 0
fi

msg "Planning deployment..."
TF_VAR_CONFIG_PATH="$CONFIG_FILE" \
TF_VAR_OCI_USER_OCID="$OCI_USER_OCID" \
TF_VAR_OCI_FINGERPRINT="$OCI_FINGERPRINT" \
TF_VAR_OCI_PRIVATE_KEY_PATH="$OCI_PRIVATE_KEY_PATH" \
  terraform -chdir="$SRC_DIR" plan -out="plan.cache"

msg "Applying deployment plan..."
TF_VAR_CONFIG_PATH="$CONFIG_FILE" \
TF_VAR_OCI_USER_OCID="$OCI_USER_OCID" \
TF_VAR_OCI_FINGERPRINT="$OCI_FINGERPRINT" \
TF_VAR_OCI_PRIVATE_KEY_PATH="$OCI_PRIVATE_KEY_PATH" \
  terraform -chdir="$SRC_DIR" apply "plan.cache"

msg "Deployment complete!"
msg ""
msg "To access your cluster:"
KUBECONFIG_PATH="$(terraform -chdir="$SRC_DIR" output -raw kubeconfig_path)"
msg "export KUBECONFIG=${KUBECONFIG_PATH}"
msg "kubectl get nodes"
